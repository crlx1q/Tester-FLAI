const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const Database = require('../utils/database-mongo');

const router = express.Router();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ APK
const apkStorage = multer.diskStorage({
  destination: (req, file, cb) => {
    const apkDir = path.join(__dirname, '../apk');
    if (!fs.existsSync(apkDir)) {
      fs.mkdirSync(apkDir, { recursive: true });
    }
    cb(null, apkDir);
  },
  filename: (req, file, cb) => {
    cb(null, 'app-release.apk');
  }
});

const uploadApk = multer({ 
  storage: apkStorage,
  fileFilter: (req, file, cb) => {
    if (path.extname(file.originalname).toLowerCase() === '.apk') {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ APK —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'));
    }
  }
});

// –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥)
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'admin123';

const checkAdminAuth = (req, res, next) => {
  const authHeader = req.headers.authorization;
  
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({
      success: false,
      message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
    });
  }
  
  const password = authHeader.substring(7);
  if (password !== ADMIN_PASSWORD) {
    return res.status(403).json({
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'
    });
  }
  
  next();
};

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞
router.post('/auth', (req, res) => {
  const { password } = req.body;
  
  if (password === ADMIN_PASSWORD) {
    res.json({
      success: true,
      token: password
    });
  } else {
    res.status(401).json({
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get('/users', checkAdminAuth, async (req, res) => {
  try {
    const users = await Database.getAllUsersForAdmin();
    const StartupCheckService = require('../services/startup-check');
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Mongoose –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –æ–±—ã—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    const usersData = users.map(user => {
      const userObj = user.toObject ? user.toObject() : user;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
      if (userObj.subscriptionType === 'pro' && userObj.subscriptionExpiresAt) {
        userObj.subscriptionRemainingDays = StartupCheckService.calculateRemainingDays(userObj.subscriptionExpiresAt);
      } else {
        userObj.subscriptionRemainingDays = 0;
      }
      
      return userObj;
    });
    
    res.json({
      success: true,
      users: usersData
    });
  } catch (error) {
    console.error('Get users error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    });
  }
});

// –í—ã–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
router.post('/users/:userId/subscription', checkAdminAuth, async (req, res) => {
  try {
    const { userId } = req.params;
    const { subscriptionType, durationDays } = req.body;
    
    if (!['free', 'pro'].includes(subscriptionType)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "free" –∏–ª–∏ "pro"'
      });
    }
    
    let expiresAt = null;
    if (subscriptionType === 'pro' && durationDays) {
      const expirationDate = new Date();
      expirationDate.setDate(expirationDate.getDate() + parseInt(durationDays));
      expiresAt = expirationDate.toISOString();
    }
    
    const updatedUser = await Database.updateUserSubscription(userId, subscriptionType, expiresAt);
    
    if (!updatedUser) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    const userObject = updatedUser.toObject();
    delete userObject.password;
    
    res.json({
      success: true,
      message: `–ü–æ–¥–ø–∏—Å–∫–∞ ${subscriptionType} —É—Å–ø–µ—à–Ω–æ ${subscriptionType === 'pro' ? '–≤—ã–¥–∞–Ω–∞ –Ω–∞ ' + durationDays + ' –¥–Ω–µ–π' : '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`,
      user: userObject
    });
  } catch (error) {
    console.error('Update subscription error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
router.get('/stats', checkAdminAuth, async (req, res) => {
  try {
    const users = await Database.getAllUsersForAdmin();
    
    const stats = {
      totalUsers: users.length,
      freeUsers: users.filter(u => !u.subscriptionType || u.subscriptionType === 'free').length,
      proUsers: users.filter(u => u.subscriptionType === 'pro').length,
      todayActivity: {
        totalPhotos: 0,
        totalMessages: 0,
        totalRecipes: 0
      }
    };
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().split('T')[0];
    users.forEach(user => {
      if (user.usage && user.usage.date === today) {
        stats.todayActivity.totalPhotos += user.usage.photosCount || 0;
        stats.todayActivity.totalMessages += user.usage.messagesCount || 0;
        stats.todayActivity.totalRecipes += user.usage.recipesCount || 0;
      }
    });
    
    res.json({
      success: true,
      stats
    });
  } catch (error) {
    console.error('Get stats error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
});

// –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.delete('/users/:userId', checkAdminAuth, async (req, res) => {
  try {
    const { userId } = req.params;
    
    const deletedUser = await Database.deleteUserCompletely(userId);
    
    if (!deletedUser) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    res.json({
      success: true,
      message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${deletedUser.name} –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã`
    });
  } catch (error) {
    console.error('Delete user error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
router.get('/settings', checkAdminAuth, async (req, res) => {
  try {
    const settings = await Database.getAppSettings();
    res.json({
      success: true,
      settings
    });
  } catch (error) {
    console.error('Get settings error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫'
    });
  }
});

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
router.post('/settings/toggle-registration', checkAdminAuth, async (req, res) => {
  try {
    const settings = await Database.getAppSettings();
    const updatedSettings = await Database.updateAppSettings({
      registrationEnabled: !settings.registrationEnabled
    });
    
    res.json({
      success: true,
      message: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ${updatedSettings.registrationEnabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`,
      settings: updatedSettings
    });
  } catch (error) {
    console.error('Toggle registration error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
    });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
router.post('/settings/update-version', checkAdminAuth, async (req, res) => {
  try {
    const { version, description } = req.body;
    
    if (!version) {
      return res.status(400).json({
        success: false,
        message: '–í–µ—Ä—Å–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
      });
    }
    
    const updatedSettings = await Database.updateAppSettings({
      currentVersion: version,
      updateDescription: description || '',
      hasUpdate: true
    });
    
    res.json({
      success: true,
      message: `–í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ ${version}`,
      settings: updatedSettings
    });
  } catch (error) {
    console.error('Update version error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏'
    });
  }
});

// –ó–∞–≥—Ä—É–∑–∏—Ç—å APK —Ñ–∞–π–ª —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
router.post('/upload-apk', checkAdminAuth, (req, res) => {
  try {
    const busboy = require('busboy');
    const bb = busboy({ headers: req.headers });
    
    let totalBytes = 0;
    let uploadedBytes = 0;
    const apkPath = path.join(__dirname, '../apk/app-release.apk');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const contentLength = parseInt(req.headers['content-length'] || '0');
    
    bb.on('file', (fieldname, file, info) => {
      const { filename, encoding, mimeType } = info;
      
      console.log(`üì¶ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ APK: ${filename} (${(contentLength / 1024 / 1024).toFixed(2)} MB)`);
      
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const apkDir = path.dirname(apkPath);
      if (!fs.existsSync(apkDir)) {
        fs.mkdirSync(apkDir, { recursive: true });
      }
      
      const writeStream = fs.createWriteStream(apkPath);
      
      file.on('data', (data) => {
        uploadedBytes += data.length;
        const progress = Math.round((uploadedBytes / contentLength) * 100);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10%
        if (progress % 10 === 0) {
          console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: ${progress}% (${(uploadedBytes / 1024 / 1024).toFixed(2)} MB)`);
        }
      });
      
      file.pipe(writeStream);
      
      writeStream.on('finish', () => {
        console.log('‚úÖ APK —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
      });
    });
    
    bb.on('finish', () => {
      res.json({
        success: true,
        message: 'APK —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
        filename: 'app-release.apk',
        path: '/apk/app-release.apk',
        size: uploadedBytes
      });
    });
    
    bb.on('error', (error) => {
      console.error('Upload error:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ APK —Ñ–∞–π–ª–∞'
      });
    });
    
    req.pipe(bb);
  } catch (error) {
    console.error('Upload APK error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ APK —Ñ–∞–π–ª–∞'
    });
  }
});

// –°–∫–∞—á–∞—Ç—å APK —Ñ–∞–π–ª (–ø—É–±–ª–∏—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç)
router.get('/download-apk', (req, res) => {
  try {
    const apkPath = path.join(__dirname, '../apk/app-release.apk');
    
    if (!fs.existsSync(apkPath)) {
      return res.status(404).json({
        success: false,
        message: 'APK —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    res.download(apkPath, 'FoodLens-AI.apk', (err) => {
      if (err) {
        console.error('Download error:', err);
        res.status(500).json({
          success: false,
          message: '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è APK'
        });
      }
    });
  } catch (error) {
    console.error('Download APK error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è APK —Ñ–∞–π–ª–∞'
    });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å Gemini API –∫–ª—é—á
router.post('/settings/gemini-api-key', checkAdminAuth, async (req, res) => {
  try {
    const { apiKey } = req.body;
    
    if (!apiKey || apiKey.trim() === '') {
      return res.status(400).json({
        success: false,
        message: 'API –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á –≤ –ë–î (–≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ, –Ω–æ –Ω–µ –æ—Ç–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É)
    const updatedSettings = await Database.updateAppSettings({
      geminiApiKey: apiKey
    });
    
    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    process.env.GEMINI_API_KEY = apiKey;
    
    console.log('‚úÖ Gemini API –∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω');
    
    res.json({
      success: true,
      message: 'Gemini API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
      keyPreview: apiKey.substring(0, 8) + '...' + apiKey.slice(-4) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
    });
  } catch (error) {
    console.error('Update Gemini API key error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞'
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ Gemini API –∫–ª—é—á–∞
router.get('/settings/gemini-api-key/status', checkAdminAuth, async (req, res) => {
  try {
    const settings = await Database.getAppSettings();
    
    res.json({
      success: true,
      hasKey: !!settings.geminiApiKey,
      keyPreview: settings.geminiApiKey 
        ? settings.geminiApiKey.substring(0, 8) + '...' + settings.geminiApiKey.slice(-4)
        : null
    });
  } catch (error) {
    console.error('Get Gemini API key status error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ API –∫–ª—é—á–∞'
    });
  }
});

module.exports = router;
