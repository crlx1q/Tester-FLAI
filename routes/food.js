const express = require('express');
const multer = require('multer');
const path = require('path');
const authMiddleware = require('../middleware/auth');
const { checkPhotoLimit } = require('../middleware/usage-limits');
const { checkFileSizeLimit, compressImage, compressBase64Image, checkBase64SizeLimit } = require('../middleware/image-compression');
const Database = require('../utils/database');
const { analyzeFood } = require('../services/ai-service');

const router = express.Router();

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
function getMealTypeByHour(hour) {
  if (hour >= 6 && hour < 12) return '–ó–∞–≤—Ç—Ä–∞–∫';
  if (hour >= 12 && hour < 16) return '–û–±–µ–¥';
  if (hour >= 16 && hour < 21) return '–£–∂–∏–Ω';
  return '–ù–æ—á–Ω–æ–π –ø–µ—Ä–µ–∫—É—Å';
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, 'food-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({
  storage: storage,
  limits: { fileSize: 50 * 1024 * 1024 }, // 50MB –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç (–±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –≤ middleware)
  fileFilter: (req, file, cb) => {
    // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ mime types
    const allowedMimeTypes = [
      'image/jpeg',
      'image/jpg',
      'image/png',
      'image/gif',
      'image/webp',
      'image/heic',
      'image/heif'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º mime type
    if (allowedMimeTypes.includes(file.mimetype.toLowerCase())) {
      return cb(null, true);
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const allowedExtensions = /\.(jpg|jpeg|png|gif|webp|heic|heif)$/i;
    if (allowedExtensions.test(file.originalname)) {
      return cb(null, true);
    }
    
    cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã (JPG, PNG, GIF, WEBP, HEIC)'));
  }
});

// –ê–Ω–∞–ª–∏–∑ –µ–¥—ã –ø–æ —Ñ–æ—Ç–æ
router.post('/analyze', authMiddleware, upload.single('image'), checkFileSizeLimit, compressImage, async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    const user = await Database.getUserById(req.userId);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI
    const analysis = await analyzeFood(req.file.path, user);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const hour = new Date().getHours();
    const mealType = getMealTypeByHour(hour);
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Buffer –¥–ª—è MongoDB
    const fs = require('fs');
    const imageBuffer = fs.readFileSync(req.file.path);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(req.file.path);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É —Å Buffer (–ù–ï –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É!)
    const foodData = {
      userId: req.userId,
      name: (analysis.name && analysis.name.trim() !== '') ? analysis.name : '–ë–ª—é–¥–æ',
      imageUrl: `data:image/jpeg;base64,${imageBuffer.toString('base64')}`, // ‚úÖ Base64 –¥–ª—è createFood
      calories: analysis.calories || 0,
      macros: analysis.macros || { protein: 0, fat: 0, carbs: 0 },
      mealType
    };
    
    console.log('üíæ Saving food to database:', {
      ...foodData,
      imageUrl: foodData.imageUrl.substring(0, 50) + '...' // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å base64
    });
    
    const newFood = await Database.createFood(foodData);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const foodObject = newFood.toObject();
    
    res.json({
      success: true,
      food: foodObject
    });
  } catch (error) {
    console.error('Food analysis error:', error);
    res.status(500).json({
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    });
  }
});

// –ò—Å—Ç–æ—Ä–∏—è –µ–¥—ã
router.get('/history', authMiddleware, async (req, res) => {
  try {
    const foods = await Database.getFoods(req.userId);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    foods.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Mongoose –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –æ–±—ä–µ–∫—Ç—ã —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const foodsWithImages = foods.map(food => food.toObject ? food.toObject() : food);
    
    console.log(`üìã –ò—Å—Ç–æ—Ä–∏—è –µ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.userId}: ${foodsWithImages.length} –±–ª—é–¥`);
    if (foodsWithImages.length > 0) {
      console.log(`üñºÔ∏è –ü–µ—Ä–≤–æ–µ –±–ª—é–¥–æ –∏–º–µ–µ—Ç imageUrl: ${!!foodsWithImages[0].imageUrl}`);
    }
    
    res.json({
      success: true,
      foods: foodsWithImages
    });
  } catch (error) {
    console.error('Get food history error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏'
    });
  }
});

// –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞
router.get('/daily-summary', authMiddleware, async (req, res) => {
  try {
    const user = await Database.getUserById(req.userId);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è
    let targetDate = new Date();
    if (req.query.date) {
      targetDate = new Date(req.query.date);
    }
    
    const dayFoods = await Database.getFoodsByDate(req.userId, targetDate);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∏ –º–∞–∫—Ä–æ—Å—ã
    let totalCalories = 0;
    let consumedMacros = { carbs: 0, protein: 0, fat: 0 };
    
    dayFoods.forEach(food => {
      totalCalories += food.calories || 0;
      if (food.macros) {
        consumedMacros.carbs += food.macros.carbs || 0;
        consumedMacros.protein += food.macros.protein || 0;
        consumedMacros.fat += food.macros.fat || 0;
      }
    });
    
    const remainingCalories = user.dailyCalories - totalCalories;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Mongoose –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –æ–±—ä–µ–∫—Ç—ã —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const foodsWithImages = dayFoods.map(food => food.toObject ? food.toObject() : food);
    
    res.json({
      success: true,
      data: {
        totalCalories,
        targetCalories: user.dailyCalories,
        remainingCalories,
        consumedMacros,
        targetMacros: user.macros,
        foods: foodsWithImages
      }
    });
  } catch (error) {
    console.error('Get daily summary error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏'
    });
  }
});

// –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –Ω–µ–¥–µ–ª—é
router.get('/weekly-progress', authMiddleware, async (req, res) => {
  try {
    const user = await Database.getUserById(req.userId);
    const weekData = [];
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    for (let i = 6; i >= 0; i--) {
      const date = new Date();
      date.setDate(date.getDate() - i);
      date.setHours(0, 0, 0, 0);
      
      const dayFoods = await Database.getFoodsByDate(req.userId, date);
      const totalCalories = dayFoods.reduce((sum, f) => sum + f.calories, 0);
      const percentage = user.dailyCalories > 0 
        ? Math.round((totalCalories / user.dailyCalories) * 100) 
        : 0;
      
      weekData.push({
        date: date.toISOString().split('T')[0],
        totalCalories,
        targetCalories: user.dailyCalories,
        percentage,
        foodCount: dayFoods.length
      });
    }
    
    res.json({
      success: true,
      data: weekData
    });
  } catch (error) {
    console.error('Get weekly progress error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞'
    });
  }
});

// –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞
router.get('/monthly-active-days', authMiddleware, async (req, res) => {
  try {
    const { year, month } = req.query;
    
    if (!year || !month) {
      return res.status(400).json({
        success: false,
        message: '–ì–æ–¥ –∏ –º–µ—Å—è—Ü –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –¥–∞—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
    const startDate = new Date(Date.UTC(parseInt(year), parseInt(month) - 1, 1));
    const endDate = new Date(Date.UTC(parseInt(year), parseInt(month), 0, 23, 59, 59, 999));
    
    const activeDays = [];
    const currentDate = new Date(startDate);
    
    while (currentDate <= endDate) {
      const foods = await Database.getFoodsByDate(req.userId, currentDate);
      if (foods && foods.length > 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –¥–∞—Ç—É –¥–ª—è —Å—Ç—Ä–æ–∫–∏
        const dateStr = currentDate.toISOString().split('T')[0];
        activeDays.push(dateStr);
      }
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é –≤ UTC
      currentDate.setUTCDate(currentDate.getUTCDate() + 1);
    }
    
    res.json({
      success: true,
      data: activeDays
    });
  } catch (error) {
    console.error('Monthly active days error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π'
    });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –±–ª—é–¥–æ
router.put('/:id', authMiddleware, async (req, res) => {
  try {
    const food = await Database.getFoodById(req.params.id);
    
    if (!food) {
      return res.status(404).json({
        success: false,
        message: '–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª—é–¥–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (food.userId.toString() !== req.userId) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–ª—é–¥—É'
      });
    }
    
    const { name, calories, macros, healthScore } = req.body;
    
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞:', {
      id: req.params.id,
      —Å—Ç–∞—Ä–æ–µ: { name: food.name, calories: food.calories },
      –Ω–æ–≤–æ–µ: { name, calories, healthScore }
    });
    
    const updatedFood = await Database.updateFood(req.params.id, {
      name,
      calories,
      macros,
      healthScore
    });
    
    console.log('‚úÖ –ë–ª—é–¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', updatedFood._id);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const foodObject = updatedFood.toObject ? updatedFood.toObject() : updatedFood;
    
    res.json({
      success: true,
      message: '–ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
      food: foodObject
    });
  } catch (error) {
    console.error('Update food error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞'
    });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –±–ª—é–¥–æ —Å —Ñ–æ—Ç–æ –∏ –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ AI
router.put('/:id/update-with-image', authMiddleware, async (req, res) => {
  try {
    const food = await Database.getFoodById(req.params.id);
    
    if (!food) {
      return res.status(404).json({
        success: false,
        message: '–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª—é–¥–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (!food.userId.equals(req.userId)) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–ª—é–¥—É'
      });
    }
    
    const { newName, image } = req.body;
    
    if (!newName || !image) {
      return res.status(400).json({
        success: false,
        message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }
    
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ —Å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ AI:', {
      id: req.params.id,
      oldName: food.name,
      newName: newName
    });
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º base64 –¥–∞–Ω–Ω—ã–µ
    const base64Data = image.includes('base64,') 
      ? image.split('base64,')[1] 
      : image;
    
    const { analyzeImageFoodWithName } = require('../utils/ai');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Gemini Vision —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    const foodData = await analyzeImageFoodWithName(base64Data, newName);
    
    console.log('üìä AI Analysis Result:', JSON.stringify(foodData, null, 2));
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å emoji (–∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–ª—é–¥–∞)
    const emoji = foodData.emoji || 'üçΩÔ∏è';
    const nameWithEmoji = `${emoji} ${foodData.name || newName}`;
    
    const updateData = {
      name: nameWithEmoji,
      calories: foodData.calories || 0,
      macros: foodData.macros || { protein: 0, fat: 0, carbs: 0 },
      healthScore: foodData.healthScore !== undefined ? foodData.healthScore : 50
    };
    
    console.log('üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ MongoDB:', JSON.stringify(updateData, null, 2));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª—é–¥–æ
    const updatedFood = await Database.updateFood(req.params.id, updateData);
    
    if (!updatedFood) {
      console.error('‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!');
      return res.status(404).json({
        success: false,
        message: '–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
      });
    }
    
    console.log('‚úÖ –ë–ª—é–¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ MongoDB:', {
      id: updatedFood._id,
      name: updatedFood.name,
      calories: updatedFood.calories,
      macros: updatedFood.macros
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const foodObject = updatedFood.toObject ? updatedFood.toObject() : updatedFood;
    
    res.json({
      success: true,
      message: '–ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å —É—á–µ—Ç–æ–º —Ñ–æ—Ç–æ',
      food: foodObject,
      analysis: foodData
    });
    
  } catch (error) {
    console.error('Update food with image error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞: ' + error.message
    });
  }
});

// –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ
router.delete('/:id', authMiddleware, async (req, res) => {
  try {
    const food = await Database.getFoodById(req.params.id);
    
    if (!food) {
      return res.status(404).json({
        success: false,
        message: '–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª—é–¥–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (food.userId.toString() !== req.userId) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–ª—é–¥—É'
      });
    }
    
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ MongoDB –∫–∞–∫ Buffer, —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    
    await Database.deleteFood(req.params.id);
    
    res.json({
      success: true,
      message: '–ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'
    });
  } catch (error) {
    console.error('Delete food error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª—é–¥–∞'
    });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
router.post('/:id/favorite', authMiddleware, async (req, res) => {
  try {
    const food = await Database.getFoodById(req.params.id);
    
    if (!food) {
      return res.status(404).json({
        success: false,
        message: '–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    // –õ—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±–æ–µ –±–ª—é–¥–æ –≤ —Å–≤–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–ª–∞–¥–µ–ª—å—Ü–∞ - —ç—Ç–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –∞ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!
    
    const favoriteFood = await Database.addFavoriteFood(req.userId, {
      name: food.name,
      calories: food.calories,
      macros: food.macros
    });
    
    res.json({
      success: true,
      message: '–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
      favoriteFood
    });
  } catch (error) {
    console.error('Add favorite food error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞
router.get('/favorites/list', authMiddleware, async (req, res) => {
  try {
    const favoriteFoods = await Database.getFavoriteFoods(req.userId);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Mongoose –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –æ–±—ä–µ–∫—Ç—ã —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const foodsWithImages = favoriteFoods.map(food => food.toObject ? food.toObject() : food);
    
    res.json({
      success: true,
      favoriteFoods: foodsWithImages
    });
  } catch (error) {
    console.error('Get favorite foods error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥'
    });
  }
});

// –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
router.delete('/favorites/:id', authMiddleware, async (req, res) => {
  try {
    await Database.removeFavoriteFood(req.userId, req.params.id);
    
    res.json({
      success: true,
      message: '–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'
    });
  } catch (error) {
    console.error('Remove from favorites error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'
    });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫
router.post('/favorites/:id/add-to-diary', authMiddleware, async (req, res) => {
  try {
    const favoriteFoods = await Database.getFavoriteFoods(req.userId);
    const favoriteFood = favoriteFoods.find(f => f._id.toString() === req.params.id);
    
    if (!favoriteFood) {
      console.log(`‚ùå –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. ID: ${req.params.id}, –í—Å–µ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: ${favoriteFoods.length}`);
      return res.status(404).json({
        success: false,
        message: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const hour = new Date().getHours();
    const mealType = getMealTypeByHour(hour);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –±–ª—é–¥–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
    const foodData = {
      userId: req.userId,
      name: favoriteFood.name,
      imageUrl: null, // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –±–µ–∑ —Ñ–æ—Ç–æ
      calories: favoriteFood.calories,
      macros: favoriteFood.macros,
      mealType
    };
    
    const newFood = await Database.createFood(foodData);
    const foodObject = newFood.toObject ? newFood.toObject() : newFood;
    
    res.json({
      success: true,
      message: '–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫',
      food: foodObject
    });
  } catch (error) {
    console.error('Add favorite to diary error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫'
    });
  }
});

// –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª—é–¥–∞)
router.post('/analyze-only', authMiddleware, async (req, res) => {
  try {
    const { description } = req.body;
    
    if (!description || description.trim().length === 0) {
      return res.status(400).json({ 
        success: false, 
        message: '–û–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' 
      });
    }

    const { analyzeTextDescription } = require('../utils/ai');
    
    // –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Gemini AI (–Ω–µ —Å–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ)
    const foodData = await analyzeTextDescription(description);
    
    res.json({ 
      success: true, 
      analysis: foodData
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–ø–∏—Å–∞–Ω–∏—è:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–ø–∏—Å–∞–Ω–∏—è: ' + error.message
    });
  }
});

// –ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ Gemini AI
router.post('/analyze-description', authMiddleware, async (req, res) => {
  try {
    const { description } = req.body;
    
    if (!description || description.trim().length === 0) {
      return res.status(400).json({ 
        success: false, 
        message: '–û–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' 
      });
    }

    const { analyzeTextDescription } = require('../utils/ai');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Gemini AI
    const foodData = await analyzeTextDescription(description);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const hour = new Date().getHours();
    const mealType = getMealTypeByHour(hour);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫
    const emoji = foodData.emoji || 'üçΩÔ∏è';
    const name = foodData.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ';
    const newFood = Database.createFood({
      userId: req.userId,
      name: `${emoji} ${name}`,
      calories: foodData.calories || 0,
      macros: foodData.macros || { protein: 0, fat: 0, carbs: 0 },
      healthScore: foodData.healthScore !== undefined ? foodData.healthScore : 50,
      imageUrl: null,
      mealType
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º streak (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    const user = Database.getUserById(req.userId);
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const lastVisit = user.lastVisit ? new Date(user.lastVisit) : null;
    const lastVisitDay = lastVisit ? new Date(lastVisit.getFullYear(), lastVisit.getMonth(), lastVisit.getDate()) : null;
    
    let newStreak = user.streak || 0;
    let maxStreak = user.maxStreak || 0;
    
    if (lastVisitDay) {
      const diffDays = Math.floor((today - lastVisitDay) / (1000 * 60 * 60 * 24));
      if (diffDays === 0) {
        // –°–µ–≥–æ–¥–Ω—è —É–∂–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      } else if (diffDays === 1) {
        newStreak = (newStreak === 0) ? 1 : newStreak + 1;
        if (newStreak > maxStreak) {
          maxStreak = newStreak;
        }
      } else {
        newStreak = 1;
        if (maxStreak === 0) {
          maxStreak = 1;
        }
      }
    } else {
      newStreak = 1;
      maxStreak = 1;
    }
    
    await Database.updateUser(req.userId, {
      streak: newStreak,
      maxStreak: maxStreak,
      lastVisit: now.toISOString()
    });
    
    res.json({ 
      success: true, 
      food: newFood,
      analysis: foodData
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–ø–∏—Å–∞–Ω–∏—è:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–ø–∏—Å–∞–Ω–∏—è: ' + error.message
    });
  }
});

// –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ Gemini Vision
router.post('/analyze-image', authMiddleware, checkPhotoLimit, async (req, res) => {
  try {
    const { image } = req.body;
    
    if (!image) {
      return res.status(400).json({ 
        success: false, 
        message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' 
      });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º base64 –¥–∞–Ω–Ω—ã–µ (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:image/jpeg;base64,)
    let base64Data = image.includes('base64,') 
      ? image.split('base64,')[1] 
      : image;
    
    console.log(`üì∏ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä base64: ${(base64Data.length / 1024).toFixed(2)} KB`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try {
      checkBase64SizeLimit(req.userId, base64Data);
    } catch (error) {
      if (error.statusCode === 413) {
        console.log(`‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: ${error.fileSize}`);
        return res.status(413).json({
          success: false,
          message: error.message,
          fileSize: error.fileSize
        });
      }
      throw error;
    }
    
    // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const compressedBuffer = await compressBase64Image(base64Data);
    base64Data = compressedBuffer.toString('base64');

    const { analyzeImageFood } = require('../utils/ai');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Gemini Vision
    const foodData = await analyzeImageFood(base64Data);
    
    console.log('üìä AI Analysis Result:', foodData);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const hour = new Date().getHours();
    const mealType = getMealTypeByHour(hour);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫ (–ë–ï–ó —ç–º–æ–¥–∑–∏, —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ)
    const name = foodData.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ';
    const foodToSave = {
      userId: req.userId,
      name: name, // –ë–µ–∑ —ç–º–æ–¥–∑–∏!
      calories: foodData.calories || 0,
      macros: foodData.macros || { protein: 0, fat: 0, carbs: 0 },
      healthScore: foodData.healthScore !== undefined ? foodData.healthScore : 50,
      imageUrl: `data:image/jpeg;base64,${base64Data}`, // ‚úÖ Base64 –¥–ª—è MongoDB!
      mealType
    };
    
    console.log('üíæ Saving food to database (with base64 image)');
    const newFood = await Database.createFood(foodToSave);
    console.log('‚úÖ Food saved with ID:', newFood._id);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const foodObject = newFood.toObject();
    console.log('üñºÔ∏è Food has imageUrl:', !!foodObject.imageUrl);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await Database.incrementUserUsage(req.userId, 'photos');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º streak (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    const user = await Database.getUserById(req.userId);
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const lastVisit = user.lastVisit ? new Date(user.lastVisit) : null;
    const lastVisitDay = lastVisit ? new Date(lastVisit.getFullYear(), lastVisit.getMonth(), lastVisit.getDate()) : null;
    
    let newStreak = user.streak || 0;
    let maxStreak = user.maxStreak || 0;
    
    if (lastVisitDay) {
      const diffDays = Math.floor((today - lastVisitDay) / (1000 * 60 * 60 * 24));
      if (diffDays === 0) {
        // –°–µ–≥–æ–¥–Ω—è —É–∂–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      } else if (diffDays === 1) {
        newStreak = (newStreak === 0) ? 1 : newStreak + 1;
        if (newStreak > maxStreak) {
          maxStreak = newStreak;
        }
      } else {
        newStreak = 1;
        if (maxStreak === 0) {
          maxStreak = 1;
        }
      }
    } else {
      newStreak = 1;
      maxStreak = 1;
    }
    
    await Database.updateUser(req.userId, {
      streak: newStreak,
      maxStreak: maxStreak,
      lastVisit: now.toISOString()
    });
    
    res.json({ 
      success: true, 
      food: foodObject, // ‚úÖ –û–±—ä–µ–∫—Ç —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏!
      analysis: foodData
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.message
    });
  }
});

// ==================== WATER TRACKING ====================

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–¥–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
router.get('/water/:date', authMiddleware, async (req, res) => {
  try {
    const { date } = req.params;
    
    if (!date) {
      return res.status(400).json({
        success: false,
        message: '–î–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
      });
    }
    
    const waterIntake = await Database.getWaterIntakeByDate(req.userId, date);
    
    res.json({
      success: true,
      waterIntake: waterIntake || { amount: 0 }
    });
  } catch (error) {
    console.error('Get water intake error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–µ'
    });
  }
});

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–¥–µ
router.post('/water', authMiddleware, async (req, res) => {
  try {
    const { date, amount } = req.body;
    
    if (!date || amount === undefined) {
      return res.status(400).json({
        success: false,
        message: '–î–∞—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }
    
    if (amount < 0) {
      return res.status(400).json({
        success: false,
        message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º'
      });
    }
    
    console.log('üíß –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–¥—ã:', {
      userId: req.userId,
      date,
      amount
    });
    
    const waterIntake = await Database.saveWaterIntake(req.userId, date, amount);
    
    console.log('‚úÖ –í–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', waterIntake);
    
    res.json({
      success: true,
      message: '–î–∞–Ω–Ω—ã–µ –æ –≤–æ–¥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
      waterIntake
    });
  } catch (error) {
    console.error('Save water intake error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–µ'
    });
  }
});

module.exports = router;
