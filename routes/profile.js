const express = require('express');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const authMiddleware = require('../middleware/auth');
const { checkFileSizeLimit, compressImage } = require('../middleware/image-compression');
const User = require('../models/User');
const { compressProfileImage, bufferToBase64 } = require('../utils/imageUtils');

const router = express.Router();

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads/avatars –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const avatarsDir = path.join(__dirname, '../uploads/avatars');
if (!fs.existsSync(avatarsDir)) {
  fs.mkdirSync(avatarsDir, { recursive: true });
}

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, avatarsDir);
  },
  filename: (req, file, cb) => {
    const uniqueName = `avatar_${req.userId}_${Date.now()}${path.extname(file.originalname)}`;
    cb(null, uniqueName);
  }
});

const upload = multer({ 
  storage,
  limits: { fileSize: 50 * 1024 * 1024 }, // 50MB –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç (–±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –≤ middleware)
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|webp/;
    const extname = allowedTypes.test(file.originalname.toLowerCase());
    const mimetype = file.mimetype ? allowedTypes.test(file.mimetype) : true;
    
    if (mimetype || extname) {
      return cb(null, true);
    }
    cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!'));
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
router.get('/', authMiddleware, async (req, res) => {
  try {
    const user = await User.findById(req.userId);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    const userResponse = user.toObject();
    delete userResponse.password;
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    if (userResponse.profileImage && userResponse.profileImage.data) {
      userResponse.profileImageBase64 = bufferToBase64(
        userResponse.profileImage.data, 
        userResponse.profileImage.contentType
      );
      delete userResponse.profileImage;
    }
    
    res.json({
      success: true,
      user: userResponse
    });
  } catch (error) {
    console.error('Get profile error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
    });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
router.put('/', authMiddleware, async (req, res) => {
  try {
    const updates = req.body;
    
    // –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è
    delete updates._id;
    delete updates.password;
    delete updates.email;
    delete updates.profileImage;
    delete updates.createdAt;
    delete updates.updatedAt;
    
    const updatedUser = await User.findByIdAndUpdate(
      req.userId, 
      updates, 
      { new: true, runValidators: true }
    );
    
    if (!updatedUser) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    const userResponse = updatedUser.toObject();
    delete userResponse.password;
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    if (userResponse.profileImage && userResponse.profileImage.data) {
      userResponse.profileImageBase64 = bufferToBase64(
        userResponse.profileImage.data, 
        userResponse.profileImage.contentType
      );
      delete userResponse.profileImage;
    }
    
    res.json({
      success: true,
      user: userResponse
    });
  } catch (error) {
    console.error('Update profile error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
    });
  }
});

// –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
router.post('/change-password', authMiddleware, async (req, res) => {
  try {
    console.log('üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.userId);
    
    const { oldPassword, newPassword } = req.body;
    
    if (!oldPassword || !newPassword) {
      console.log('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–æ–ª–∏');
      return res.status(400).json({
        success: false,
        message: '–°—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }
    
    if (newPassword.length < 6) {
      return res.status(400).json({
        success: false,
        message: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤'
      });
    }
    
    const user = await User.findById(req.userId);
    
    if (!user) {
      console.log('‚ù§Ô∏è‚Äçüî• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', req.userId);
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ –º–æ–¥–µ–ª–∏)
    const isValidPassword = await user.comparePassword(oldPassword);
    
    if (!isValidPassword) {
      console.log('‚ù§Ô∏è‚Äçüî• –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å');
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å'
      });
    }
    
    console.log('‚úÖ –°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å (—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    user.password = newPassword;
    await user.save();
    
    console.log(`‚úÖ –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.userId} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω`);
    
    res.json({
      success: true,
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
    });
  } catch (error) {
    console.error('Change password error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è'
    });
  }
});

// –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
router.post('/onboarding', authMiddleware, async (req, res) => {
  try {
    const { goal, gender, age, height, weight, activityLevel, allergies } = req.body;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∏ –∫–∞–ª–æ—Ä–∏–∏
    let bmr;
    if (gender === 'male') {
      bmr = 10 * weight + 6.25 * height - 5 * age + 5;
    } else {
      bmr = 10 * weight + 6.25 * height - 5 * age - 161;
    }
    
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const activityMultipliers = {
      low: 1.2,
      moderate: 1.5,
      high: 1.8
    };
    
    let dailyCalories = Math.round(bmr * activityMultipliers[activityLevel]);
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–ª–∏
    if (goal === 'lose_weight') {
      dailyCalories = Math.round(dailyCalories * 0.85);
    } else if (goal === 'gain_muscle') {
      dailyCalories = Math.round(dailyCalories * 1.15);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Ä–æ—Å—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
    const macros = {
      protein: Math.round((dailyCalories * 0.3) / 4),
      fat: Math.round((dailyCalories * 0.25) / 9),
      carbs: Math.round((dailyCalories * 0.45) / 4)
    };
    
    const updates = {
      goal,
      gender,
      age,
      height,
      weight,
      activityLevel,
      allergies: allergies || [],
      dailyCalories,
      macros,
      onboardingCompleted: true
    };
    
    const updatedUser = await User.findByIdAndUpdate(
      req.userId, 
      updates, 
      { new: true, runValidators: true }
    );
    
    if (!updatedUser) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    const userResponse = updatedUser.toObject();
    delete userResponse.password;
    
    console.log('üéÜ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', updatedUser.email);
    
    const userWithoutPassword = userResponse;
    
    res.json({
      success: true,
      user: userWithoutPassword
    });
  } catch (error) {
    console.error('Onboarding error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
router.get('/limits', authMiddleware, (req, res) => {
  try {
    const user = Database.getUserById(req.userId);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    const subscriptionType = user.subscriptionType || 'free';
    let isPro = subscriptionType === 'pro';
    let subscriptionExpiresAt = user.subscriptionExpiresAt;
    
    if (isPro && subscriptionExpiresAt) {
      const expiresAt = new Date(subscriptionExpiresAt);
      const now = new Date();
      if (now > expiresAt) {
        Database.updateUserSubscription(user._id, 'free', null);
        isPro = false;
        subscriptionExpiresAt = null;
      }
    }
    
    const usage = Database.getUserUsage(req.userId);
    const limits = LIMITS[isPro ? 'pro' : 'free'];
    
    res.json({
      success: true,
      subscription: {
        type: isPro ? 'pro' : 'free',
        isPro,
        expiresAt: subscriptionExpiresAt
      },
      usage: {
        photos: {
          current: usage.photosCount,
          max: limits.photos,
          remaining: Math.max(0, limits.photos - usage.photosCount)
        },
        messages: {
          current: usage.messagesCount,
          max: limits.messages,
          remaining: Math.max(0, limits.messages - usage.messagesCount)
        },
        recipes: {
          current: usage.recipesCount,
          max: limits.recipes,
          remaining: Math.max(0, limits.recipes - usage.recipesCount)
        },
        date: usage.date
      }
    });
  } catch (error) {
    console.error('Get limits error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤'
    });
  }
});

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É
router.post('/avatar', authMiddleware, upload.single('avatar'), checkFileSizeLimit, compressImage, (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        message: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
    const user = Database.getUserById(req.userId);
    if (user && user.avatar && user.avatar.startsWith('/uploads/')) {
      const oldAvatarPath = path.join(__dirname, '..', user.avatar);
      if (fs.existsSync(oldAvatarPath)) {
        try {
          fs.unlinkSync(oldAvatarPath);
        } catch (err) {
          console.error('Error deleting old avatar:', err);
        }
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä–∫–µ
    const avatarUrl = `/uploads/avatars/${req.file.filename}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = Database.updateUser(req.userId, { avatar: avatarUrl });
    
    if (!updatedUser) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    res.json({
      success: true,
      avatar: avatarUrl,
      message: '–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
    });
  } catch (error) {
    console.error('Upload avatar error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏'
    });
  }
});

// –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
router.delete('/', authMiddleware, (req, res) => {
  try {
    const user = Database.getUserById(req.userId);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –£–¥–∞–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.avatar && user.avatar.startsWith('/uploads/')) {
      const avatarPath = path.join(__dirname, '..', user.avatar);
      if (fs.existsSync(avatarPath)) {
        try {
          fs.unlinkSync(avatarPath);
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞: ${avatarPath}`);
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏:', err);
        }
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –±–ª—é–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userFoods = Database.getFoods(req.userId);
    userFoods.forEach(food => {
      if (food.imageUrl) {
        const imagePath = path.join(__dirname, '..', food.imageUrl);
        if (fs.existsSync(imagePath)) {
          try {
            fs.unlinkSync(imagePath);
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ –±–ª—é–¥–∞: ${imagePath}`);
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –±–ª—é–¥–∞:', err);
          }
        }
      }
    });
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRecipes = Database.getRecipes().filter(r => r.userId === req.userId);
    userRecipes.forEach(recipe => {
      if (recipe.imageUrl && recipe.imageUrl.startsWith('/uploads/')) {
        const imagePath = path.join(__dirname, '..', recipe.imageUrl);
        if (fs.existsSync(imagePath)) {
          try {
            fs.unlinkSync(imagePath);
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ —Ä–µ—Ü–µ–ø—Ç–∞: ${imagePath}`);
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ —Ä–µ—Ü–µ–ø—Ç–∞:', err);
          }
        }
      }
    });
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã (—ç—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ)
    const deleted = Database.deleteUser(req.userId);
    
    console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.userId} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω`);
    
    res.json({
      success: true,
      message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });
  } catch (error) {
    console.error('Delete profile error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
    });
  }
});

module.exports = router;
