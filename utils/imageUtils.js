const sharp = require('sharp');
const fs = require('fs');

/**
 * –°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
 * @param {string} imagePath - –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @param {number} maxWidth - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 800px)
 * @param {number} quality - –∫–∞—á–µ—Å—Ç–≤–æ JPEG (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 80)
 * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
 */
async function compressImageForMongoDB(imagePath, maxWidth = 800, quality = 80) {
  try {
    // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const inputBuffer = fs.readFileSync(imagePath);
    const originalSize = inputBuffer.length;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    const metadata = await sharp(inputBuffer).metadata();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä
    const needsResize = metadata.width > maxWidth;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    let sharpInstance = sharp(inputBuffer);
    
    if (needsResize) {
      sharpInstance = sharpInstance.resize(maxWidth, null, {
        withoutEnlargement: true,
        fit: 'inside'
      });
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG –∏ —Å–∂–∏–º–∞–µ–º
    const compressedBuffer = await sharpInstance
      .jpeg({ 
        quality: quality,
        progressive: true,
        mozjpeg: true // –ª—É—á—à–µ–µ —Å–∂–∞—Ç–∏–µ
      })
      .toBuffer();
    
    const compressedSize = compressedBuffer.length;
    const filename = `compressed_${Date.now()}.jpg`;
    
    console.log(`üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ: ${originalSize} ‚Üí ${compressedSize} –±–∞–π—Ç (${Math.round((1 - compressedSize/originalSize) * 100)}% —ç–∫–æ–Ω–æ–º–∏–∏)`);
    
    return {
      data: compressedBuffer,
      contentType: 'image/jpeg',
      filename: filename,
      compressedSize: compressedSize
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
  }
}

/**
 * –°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä)
 * @param {string} imagePath - –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
 */
async function compressProfileImage(imagePath) {
  return compressImageForMongoDB(imagePath, 400, 75); // 400px, –∫–∞—á–µ—Å—Ç–≤–æ 75%
}

/**
 * –°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã
 * @param {string} imagePath - –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
 */
async function compressFoodImage(imagePath) {
  return compressImageForMongoDB(imagePath, 800, 80); // 800px, –∫–∞—á–µ—Å—Ç–≤–æ 80%
}

/**
 * –°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞
 * @param {string} imagePath - –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
 */
async function compressRecipeImage(imagePath) {
  return compressImageForMongoDB(imagePath, 600, 78); // 600px, –∫–∞—á–µ—Å—Ç–≤–æ 78%
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Buffer –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
 * @param {Buffer} buffer - –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} contentType - MIME —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {string} - base64 —Å—Ç—Ä–æ–∫–∞
 */
function bufferToBase64(buffer, contentType) {
  if (!buffer || !contentType) return null;
  return `data:${contentType};base64,${buffer.toString('base64')}`;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 * @param {string} filename - –∏–º—è —Ñ–∞–π–ª–∞
 * @returns {boolean}
 */
function isImageFile(filename) {
  const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
  const ext = filename.toLowerCase().substring(filename.lastIndexOf('.'));
  return imageExtensions.includes(ext);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 * @param {number} bytes - —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
 * @returns {string}
 */
function formatImageSize(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–æ–≤)
 * @param {string} imagePath - –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–≤—å—é
 */
async function createImageThumbnail(imagePath) {
  return compressImageForMongoDB(imagePath, 150, 60); // 150px, –∫–∞—á–µ—Å—Ç–≤–æ 60%
}

module.exports = {
  compressImageForMongoDB,
  compressProfileImage,
  compressFoodImage,
  compressRecipeImage,
  bufferToBase64,
  isImageFile,
  formatImageSize,
  createImageThumbnail
};
