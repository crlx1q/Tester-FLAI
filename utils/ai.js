const axios = require('axios');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —á—Ç–æ –∏ –≤ ai-service.js
const GEMINI_API_KEY = process.env.AI_API_KEY;
const GEMINI_MODEL = 'gemini-2.5-flash-lite'; // Gemini 2.5 Flash Lite (Stable)
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent`;

/**
 * Wrapper –¥–ª—è axios –∑–∞–ø—Ä–æ—Å–æ–≤ —Å retry –ª–æ–≥–∏–∫–æ–π –ø—Ä–∏ 503 –æ—à–∏–±–∫–∞—Ö
 */
async function axiosWithRetry(config, maxRetries = 3) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      if (attempt > 1) {
        const delay = 2000 * attempt; // –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞: 2s, 4s, 6s
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} —á–µ—Ä–µ–∑ ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
      
      const response = await axios(config);
      return response; // –£—Å–ø–µ—Ö!
      
    } catch (error) {
      const is503 = error.response?.status === 503;
      const isLastAttempt = attempt === maxRetries;
      
      if (is503 && !isLastAttempt) {
        console.log(`‚ö†Ô∏è Gemini API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (503), –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}`);
        continue; // –ü–æ–≤—Ç–æ—Ä—è–µ–º
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –Ω–µ 503 - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      throw error;
    }
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ Gemini AI
 */
async function analyzeTextDescription(description) {
  const prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏ –≤–µ—Ä–Ω–∏ —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –∏ –ë–ñ–£.

–û–ü–ò–°–ê–ù–ò–ï: "${description}"

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –û–ø—Ä–µ–¥–µ–ª–∏ —á—Ç–æ —ç—Ç–æ –∑–∞ –±–ª—é–¥–æ/–±–ª—é–¥–∞
2. –ü–æ—Å—á–∏—Ç–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "–¥–≤–∞ –±—É—Ä–≥–µ—Ä–∞" - —É—á—Ç–∏ –æ–±–∞)
3. –û—Ü–µ–Ω–∏ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ (–º–∞–ª–µ–Ω—å–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–±–æ–ª—å—à–∞—è)
4. –†–∞—Å—Å—á–∏—Ç–∞–π –¢–û–ß–ù–´–ï –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
5. –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –ï–î–ê (–Ω–∞–ø—Ä–∏–º–µ—Ä –∫–æ—Ç, —Å—Ç–æ–ª, —á–µ–ª–æ–≤–µ–∫) - —É–∫–∞–∂–∏ calories: 0
6. –ü–æ–¥–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ (–æ–¥–∏–Ω —Å–∏–º–≤–æ–ª)

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä:
- –Ø–±–ª–æ–∫–æ —Å—Ä–µ–¥–Ω–µ–µ: ~95 –∫–∫–∞–ª
- –ë–∞–Ω–∞–Ω: ~105 –∫–∫–∞–ª  
- –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 100–≥: ~165 –∫–∫–∞–ª
- –û–≤—Å—è–Ω–∫–∞ –ø–æ—Ä—Ü–∏—è: ~150 –∫–∫–∞–ª

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π:
{
  "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º",
  "emoji": "üçΩÔ∏è",
  "calories": —á–∏—Å–ª–æ,
  "macros": {
    "protein": —á–∏—Å–ª–æ_–≥—Ä–∞–º–º,
    "fat": —á–∏—Å–ª–æ_–≥—Ä–∞–º–º,
    "carbs": —á–∏—Å–ª–æ_–≥—Ä–∞–º–º
  },
  "healthScore": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100
}

–û–¶–ï–ù–ö–ê –ü–û–õ–ï–ó–ù–û–°–¢–ò (healthScore):
- 0-30: –í—Ä–µ–¥–Ω–∞—è –µ–¥–∞ (—Ñ–∞—Å—Ç—Ñ—É–¥, —Å–ª–∞–¥–æ—Å—Ç–∏, –∂–∞—Ä–µ–Ω–æ–µ)
- 31-60: –°—Ä–µ–¥–Ω—è—è (—Å–º–µ—à–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞, —É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–µ)
- 61-100: –ü–æ–ª–µ–∑–Ω–∞—è –µ–¥–∞ (–æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, –Ω–µ–∂–∏—Ä–Ω–æ–µ –º—è—Å–æ, –∫–∞—à–∏)`;

  try {
    const response = await axios.post(
      `${GEMINI_API_URL}?key=${GEMINI_API_KEY}`,
      {
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.4,
          topK: 32,
          topP: 1,
          maxOutputTokens: 2048,
          responseMimeType: 'application/json'
        }
      },
      {
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: 60000 // ‚úÖ –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 30 –¥–æ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
      }
    );

    const text = response.data.candidates[0].content.parts[0].text;
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é (–µ—Å–ª–∏ responseMimeType —Ä–∞–±–æ—Ç–∞–µ—Ç)
    try {
      let result = JSON.parse(text);
      
      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      if (Array.isArray(result) && result.length > 0) {
        result = result[0];
      }
      
      return result;
    } catch {
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        let result = JSON.parse(jsonMatch[0]);
        
        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if (Array.isArray(result) && result.length > 0) {
          result = result[0];
        }
        
        return result;
      }
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞');
    }
  } catch (error) {
    console.error('Gemini API Error:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ Gemini Vision
 */
async function analyzeImageFood(imageBase64) {
  const prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —á—Ç–æ –Ω–∞ –Ω–µ–º.

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
2. –ï—Å–ª–∏ —ç—Ç–æ –ï–î–ê –∏–ª–∏ –ù–ê–ü–ò–¢–û–ö:
   - –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞/–Ω–∞–ø–∏—Ç–∫–∞
   - –ü–æ—Å—á–∏—Ç–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (–µ—Å–ª–∏ –≤–∏–¥–Ω–æ 2 –±—É—Ä–≥–µ—Ä–∞ - —É–∫–∞–∂–∏ "–î–≤–∞ –±—É—Ä–≥–µ—Ä–∞")
   - –û—Ü–µ–Ω–∏ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ
   - –û–ø—Ä–µ–¥–µ–ª–∏ —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞ (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã)
   - –†–∞—Å—Å—á–∏—Ç–∞–π –¢–û–ß–ù–´–ï –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ –Ω–∞ –æ—Å–Ω–æ–≤–µ:
     * –¢–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     * –†–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏
     * –°–ø–æ—Å–æ–±–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–∂–∞—Ä–µ–Ω–æ–µ/–≤–∞—Ä–µ–Ω–æ–µ/–∑–∞–ø–µ—á–µ–Ω–Ω–æ–µ)
   - –ü–æ–¥–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏

3. –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –ï–î–ê (–∫–æ—Ç, —Å–æ–±–∞–∫–∞, —á–µ–ª–æ–≤–µ–∫, —Å—Ç–æ–ª, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Ç.–¥.):
   - name: "–ù–µ –µ–¥–∞! [—á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ]"
   - calories: 0
   - –≤—Å–µ –º–∞–∫—Ä–æ—Å—ã: 0
   - emoji: "‚ùå"

–í–ê–ñ–ù–û: –ë—É–¥—å —Ç–æ—á–Ω—ã–º –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏:
- –ü–∏—Ü—Ü–∞ –∫—É—Å–æ–∫: ~250-300 –∫–∫–∞–ª
- –ë—É—Ä–≥–µ—Ä: ~500-700 –∫–∫–∞–ª
- –°–∞–ª–∞—Ç: ~150-250 –∫–∫–∞–ª
- –ü–∞—Å—Ç–∞ –ø–æ—Ä—Ü–∏—è: ~350-450 –∫–∫–∞–ª

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON:
{
  "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º",
  "emoji": "üçï",
  "calories": —á–∏—Å–ª–æ,
  "macros": {
    "protein": —á–∏—Å–ª–æ_–≥—Ä–∞–º–º,
    "fat": —á–∏—Å–ª–æ_–≥—Ä–∞–º–º,
    "carbs": —á–∏—Å–ª–æ_–≥—Ä–∞–º–º
  },
  "healthScore": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100
}

–û–¶–ï–ù–ö–ê –ü–û–õ–ï–ó–ù–û–°–¢–ò (healthScore):
- 0-30: –í—Ä–µ–¥–Ω–∞—è –µ–¥–∞ (—Ñ–∞—Å—Ç—Ñ—É–¥, —Å–ª–∞–¥–æ—Å—Ç–∏, –∂–∞—Ä–µ–Ω–æ–µ –≤ –º–∞—Å–ª–µ)
- 31-60: –°—Ä–µ–¥–Ω—è—è (—Å–º–µ—à–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞, —É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–µ)
- 61-100: –ü–æ–ª–µ–∑–Ω–∞—è –µ–¥–∞ (–æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, –Ω–µ–∂–∏—Ä–Ω–æ–µ –º—è—Å–æ, –∫–∞—à–∏, —Ä—ã–±–∞)`;

  try {
    const response = await axios.post(
      `${GEMINI_API_URL}?key=${GEMINI_API_KEY}`,
      {
        contents: [{
          parts: [
            {
              text: prompt
            },
            {
              inline_data: {
                mime_type: "image/jpeg",
                data: imageBase64
              }
            }
          ]
        }],
        generationConfig: {
          temperature: 0.4,
          topK: 32,
          topP: 1,
          maxOutputTokens: 2048,
          responseMimeType: 'application/json'
        }
      },
      {
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: 60000 // ‚úÖ –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 30 –¥–æ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
      }
    );

    const text = response.data.candidates[0].content.parts[0].text;
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
    try {
      let result = JSON.parse(text);
      
      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      if (Array.isArray(result) && result.length > 0) {
        result = result[0];
      }
      
      return result;
    } catch {
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        let result = JSON.parse(jsonMatch[0]);
        
        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if (Array.isArray(result) && result.length > 0) {
          result = result[0];
        }
        
        return result;
      }
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞');
    }
  } catch (error) {
    console.error('Gemini Vision API Error:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ —á–µ—Ä–µ–∑ Gemini AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞ –∏ —Ñ–æ—Ç–æ
 */
async function generateRecipe(dishName, imageBase64 = null) {
  const prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä –∏ –¥–∏–µ—Ç–æ–ª–æ–≥. –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –±–ª—é–¥–∞: "${dishName}".

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π ${imageBase64 ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞ –∏ ' : ''}–Ω–∞–∑–≤–∞–Ω–∏–µ
2. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (prepTime –≤ –º–∏–Ω—É—Ç–∞—Ö)
3. –û–ø—Ä–µ–¥–µ–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: "–õ–µ–≥–∫–æ", "–°—Ä–µ–¥–Ω–µ", "–°–ª–æ–∂–Ω–æ"
4. –û–ø—Ä–µ–¥–µ–ª–∏ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "02:15" –¥–ª—è 2 —á–∞—Å–æ–≤ 15 –º–∏–Ω—É—Ç)
5. –†–∞—Å—Å—á–∏—Ç–∞–π –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 1 –ø–æ—Ä—Ü–∏—é
6. –°–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ –∫–∞–ª–æ—Ä–∏—è–º–∏
7. –°–æ–∑–¥–∞–π –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é

–í–ê–ñ–ù–û: –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º. –£–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON:
{
  "name": "–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞",
  "calories": —á–∏—Å–ª–æ_–∫–∞–ª–æ—Ä–∏–π_–Ω–∞_–ø–æ—Ä—Ü–∏—é,
  "macros": {
    "protein": —á–∏—Å–ª–æ_–≥—Ä–∞–º–º,
    "fat": —á–∏—Å–ª–æ_–≥—Ä–∞–º–º,
    "carbs": —á–∏—Å–ª–æ_–≥—Ä–∞–º–º
  },
  "prepTime": —á–∏—Å–ª–æ_–º–∏–Ω—É—Ç,
  "difficulty": "–õ–µ–≥–∫–æ|–°—Ä–µ–¥–Ω–µ|–°–ª–æ–∂–Ω–æ",
  "servings": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ—Ä—Ü–∏–π,
  "cookTime": "–ß–ß:–ú–ú",
  "ingredients": [
    {
      "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞",
      "amount": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
      "calories": —á–∏—Å–ª–æ_–∫–∫–∞–ª,
      "unit": "—à—Ç|–≥|–º–ª|—Å—Ç.–ª|—á.–ª"
    }
  ],
  "instructions": [
    "–®–∞–≥ 1: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "–®–∞–≥ 2: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "..."
  ]
}`;

  try {
    const parts = [{ text: prompt }];
    
    if (imageBase64) {
      parts.push({
        inline_data: {
          mime_type: "image/jpeg",
          data: imageBase64
        }
      });
    }

    const response = await axios.post(
      `${GEMINI_API_URL}?key=${GEMINI_API_KEY}`,
      {
        contents: [{ parts }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 4096,
          responseMimeType: 'application/json'
        }
      },
      {
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: 60000
      }
    );

    const text = response.data.candidates[0].content.parts[0].text;
    
    try {
      let result = JSON.parse(text);
      
      if (Array.isArray(result) && result.length > 0) {
        result = result[0];
      }
      
      return result;
    } catch {
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        let result = JSON.parse(jsonMatch[0]);
        
        if (Array.isArray(result) && result.length > 0) {
          result = result[0];
        }
        
        return result;
      }
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞');
    }
  } catch (error) {
    console.error('Gemini Recipe Generation Error:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª—é–¥–∞ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Gemini Vision
 */
async function analyzeImageFoodWithName(imageBase64, newName) {
  const prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ "${newName}". –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–π —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ —ç—Ç–æ: "${newName}"
3. –ò—Å–ø–æ–ª—å–∑—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:
   - –†–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏ (–≤–∏–∑—É–∞–ª—å–Ω–æ)
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π
   - –°–ø–æ—Å–æ–±–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–∂–∞—Ä–µ–Ω–æ–µ/–≤–∞—Ä–µ–Ω–æ–µ/–∑–∞–ø–µ—á–µ–Ω–Ω–æ–µ)
4. –†–∞—Å—Å—á–∏—Ç–∞–π –¢–û–ß–ù–´–ï –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ –Ω–∞ –æ—Å–Ω–æ–≤–µ:
   - –ù–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞: "${newName}"
   - –í–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   - –°–æ—Å—Ç–∞–≤–∞ –±–ª—é–¥–∞
5. –ü–æ–¥–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:
- –ü–∏—Ü—Ü–∞ –∫—É—Å–æ–∫: ~250-300 –∫–∫–∞–ª
- –ë—É—Ä–≥–µ—Ä: ~500-700 –∫–∫–∞–ª
- –°–∞–ª–∞—Ç: ~150-250 –∫–∫–∞–ª
- –ü–∞—Å—Ç–∞ –ø–æ—Ä—Ü–∏—è: ~350-450 –∫–∫–∞–ª

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON:
{
  "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞",
  "emoji": "üçï",
  "calories": —á–∏—Å–ª–æ,
  "macros": {
    "protein": —á–∏—Å–ª–æ_–≥—Ä–∞–º–º,
    "fat": —á–∏—Å–ª–æ_–≥—Ä–∞–º–º,
    "carbs": —á–∏—Å–ª–æ_–≥—Ä–∞–º–º
  },
  "healthScore": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100
}

–û–¶–ï–ù–ö–ê –ü–û–õ–ï–ó–ù–û–°–¢–ò (healthScore):
- 0-30: –í—Ä–µ–¥–Ω–∞—è –µ–¥–∞ (—Ñ–∞—Å—Ç—Ñ—É–¥, —Å–ª–∞–¥–æ—Å—Ç–∏, –∂–∞—Ä–µ–Ω–æ–µ –≤ –º–∞—Å–ª–µ)
- 31-60: –°—Ä–µ–¥–Ω—è—è (—Å–º–µ—à–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞, —É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–µ)
- 61-100: –ü–æ–ª–µ–∑–Ω–∞—è –µ–¥–∞ (–æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, –Ω–µ–∂–∏—Ä–Ω–æ–µ –º—è—Å–æ, –∫–∞—à–∏, —Ä—ã–±–∞)`;

  try {
    const response = await axios.post(
      `${GEMINI_API_URL}?key=${GEMINI_API_KEY}`,
      {
        contents: [{
          parts: [
            {
              text: prompt
            },
            {
              inline_data: {
                mime_type: "image/jpeg",
                data: imageBase64
              }
            }
          ]
        }],
        generationConfig: {
          temperature: 0.4,
          topK: 32,
          topP: 1,
          maxOutputTokens: 2048,
          responseMimeType: 'application/json'
        }
      },
      {
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: 60000 // ‚úÖ –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 30 –¥–æ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
      }
    );

    const text = response.data.candidates[0].content.parts[0].text;
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
    try {
      let result = JSON.parse(text);
      
      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      if (Array.isArray(result) && result.length > 0) {
        result = result[0];
      }
      
      return result;
    } catch {
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        let result = JSON.parse(jsonMatch[0]);
        
        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if (Array.isArray(result) && result.length > 0) {
          result = result[0];
        }
        
        return result;
      }
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞');
    }
  } catch (error) {
    console.error('Gemini Vision API Error:', error.response?.data || error.message);
    throw error;
  }
}

module.exports = {
  analyzeTextDescription,
  analyzeImageFood,
  analyzeImageFoodWithName,
  generateRecipe
};
